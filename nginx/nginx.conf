#1，全局配置：

#1.1，配置用户
#user  nobody;

#1.2，配置工作进程数量，默认是1，一般填入为CPU核心数，(双核4线程，可以设置为4)
worker_processes  1;

#1.3，配置日志输出
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid文件就是一个纯文本文件，里面记录的是进程的pid号
#pid        logs/nginx.pid;

#2，监听事件
events {
    #2.1单个工作进程可以允许同时建立外部连接的数量
    worker_connections  1024;
}


#3，网络配置
http {
    #3.1
    #Nginx 会根据mime type定义的对应关系来告诉浏览器如何处理服务器传给浏览器的这个文件，是打开还是下载；如果Web程序没设置，Nginx也没对应文件的扩展名，就用Nginx 里默认的 default_type定义的处理方式。
    #比如Nginx默认的配置中default_type application/octet-stream; 这个就是默认为下载，浏览器访问到未定义的扩展名的时候，就默认为下载该文件；如果将这个设置改成default_type text/html；那就是告诉浏览器默认的打开方式是把所有未设置的扩展名当HTML文件打开，虽然可能这样设置会很多打不开。
    include       mime.types;
    default_type  application/octet-stream;

    #3.2
    #日志格式配置，可以配置多个,取不同的名字即可：log_format  格式名 '具体格式' 
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #3.3日志文件的路径，以及何种格式输出：access_log  日志保存的文件  格式名
    #access_log  logs/access.log  main;


    #3.3
    #sendfile on配合使用(2)(3)  但(2)(3)只能选其一特别注意
    #（1）特殊的数据传输功能
    sendfile        on; #sendfile on | off;放置位置 http，server，location，if in location
    #参数sendfile on 用于开启文件高效传输模式，同时将tcp_nopush on 和tcp_nodelay on 两个指令设置为on，可防止网络及磁盘I/O阻塞，提升Nginx工作效率
    #（2）设置参数 tcp_nopush on  说明：当有数据时，先别着急发送, 确保数据包已经装满数据, 避免了网络拥塞
    #（3）设置参数 tcp_nodelay on 说明：有时要抓紧发货, 确保数据尽快发送, 提高可数据传输效率
    #tcp_nopush     on; 参数语法 tcp_nopush on | off;放置位置 http，server，location
    
    #3.4
    #HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。
    #KeepAlive 在一段时间内保持打开状态，它们会在这段时间内占用资源。占用过多就会影响性能。
    #Nginx 使用 keepalive_timeout 来指定 KeepAlive 的超时时间（timeout）。指定每个 TCP 连接最多可以保持多长时间。Nginx 的默认值是 75 秒，有些浏览器最多只保持 60 秒，所以可以设定为 60 秒。若将它设置为 0，就禁止了 keepalive 连接。
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #3.5
    # 开启或者关闭gzip模块
    #当客户端请求到服务端的时候，服务器解析请求头，如果客户端支持gzip压缩，响应时对请求的资源进行压缩并返回给客户端，浏览器按照自己的方式解析，在http响应头，我们可以看到content-encoding:gzip，这是指服务端使用了gzip的压缩方式
    #gzip  on;

    # 负载均衡
    upstream daili1 {
        #服务器资源
        server 127.0.0.1:8060 weight=1;
        server 127.0.0.1:8070 weight=1; #weight是权重
    }


    #3.6，服务配置
    server {
        #监听的端口
        listen       80;
        #服务器地址
        server_name  localhost;

        #服务的编码
        #charset koi8-r;

        #服务的日志文件以及格式
        #access_log  logs/host.access.log  main;


        #语法：location =/ {}：优先级1,精确匹配，根路径
        #匹配符     匹配规则                        优先级
        # =         精确匹配                        1
        # ^~        以某个字符串开头                 2
        # ~         区分大小写的正则匹配             3
        # ~*        不区分大小写的正则匹配            4
        # !~        区分大小写不匹配的正则            5
        # !~*       不区分大小写不匹配的正则           6
        # /         通用匹配，任何请求都会匹配到       7


        #文件位置配置
        #location 匹配路由 路由信息 
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            # 反向代理配置
            # proxy_pass http://daili1; #语法：proxy_pass http://负载均衡名
            # 正向代理配置
#             proxy_pass $scheme://$host$request_uri;
#             resolver 119.29.29.29;#dns配置
            
        }

       

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
